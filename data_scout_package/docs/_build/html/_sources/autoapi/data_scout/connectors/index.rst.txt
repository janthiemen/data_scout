:mod:`data_scout.connectors`
============================

.. py:module:: data_scout.connectors


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   big_query/index.rst
   connector/index.rst
   csv/index.rst
   data_source_type/index.rst
   excel/index.rst
   join/index.rst
   sql/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   data_scout.connectors.Connector
   data_scout.connectors.CSV
   data_scout.connectors.Excel
   data_scout.connectors.DataSourceType
   data_scout.connectors.BigQuery
   data_scout.connectors.SQL




Attributes
~~~~~~~~~~

.. autoapisummary::

   data_scout.connectors.DATA_SOURCE_MAP


.. class:: Connector(arguments: dict)


   .. attribute:: SAMPLING_TECHNIQUES
      :annotation: = ['random', 'stratified', 'top']

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, sample: bool = False, sampling_technique: str = 'top', column_types: bool = False) -> List[dict]
      :abstractmethod:

      This class is called when the data needs to be loaded.

      Arguments:
          :type sample: boolean: Whether to take a sample or not
          :type sampling_technique: str: Which sampling technique to use (top, stratisfied, random)

      Returns:
          dict -- The row, including the extra output column



.. class:: CSV(arguments)


   Bases: :py:obj:`data_scout.connectors.connector.Connector`

   Read data from a CSV file.

   .. attribute:: TMP_SINK
      :annotation: = False

      

   .. attribute:: MAX_SIZE
      :annotation: = 2000000

      

   .. attribute:: MAX_ROWS
      :annotation: = 200

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, sample: bool = False, sampling_technique: str = 'top', column_types: bool = False) -> List[dict]

      This class is called when the data needs to be loaded.

      Arguments:
          :type sample: boolean: Whether to take a sample or not
          :type sampling_technique: str: Which sampling technique to use (top, stratisfied, random)

      Returns:
          dict -- The row, including the extra output column



.. class:: Excel(arguments)


   Bases: :py:obj:`data_scout.connectors.connector.Connector`

   Read data from a Excel file.

   .. attribute:: TMP_SINK
      :annotation: = False

      

   .. attribute:: MAX_SIZE
      :annotation: = 2000000

      

   .. attribute:: MAX_ROWS
      :annotation: = 200

      

   .. attribute:: fields
      

      

   .. method:: _get_row_values(self, row: tuple) -> list


   .. method:: __call__(self, sample: bool = False, sampling_technique: str = 'top', column_types: bool = False) -> List[dict]

      This class is called when the data needs to be loaded.

      Arguments:
          :type sample: boolean: Whether to take a sample or not
          :type sampling_technique: str: Which sampling technique to use (top, stratisfied, random)

      Returns:
          dict -- The row, including the extra output column



.. class:: DataSourceType

   .. attribute:: data_source_types
      

      

   .. method:: serialize(self)


   .. method:: get_by_string(name: str) -> Type[data_scout.connectors.connector.Connector]
      :staticmethod:



.. class:: BigQuery(arguments: dict)


   Bases: :py:obj:`data_scout.connectors.connector.Connector`

   .. attribute:: fields
      

      

   .. method:: __call__(self, sample: bool = False, sampling_technique: str = 'top', column_types: bool = False)

      This class is called when the data needs to be loaded.

      Arguments:
          :type sample: boolean: Whether to take a sample or not
          :type sampling_technique: str: Which sampling technique to use (top, stratisfied, random)

      Returns:
          dict -- The row, including the extra output column



.. class:: SQL(arguments)


   Bases: :py:obj:`data_scout.connectors.connector.Connector`

   Read data from a SQL database.

   .. attribute:: TMP_SINK
      :annotation: = False

      

   .. attribute:: MAX_ROWS
      :annotation: = 200

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, sample: bool = False, sampling_technique: str = 'top', column_types: bool = False) -> List[dict]

      This class is called when the data needs to be loaded.

      Arguments:
          :type sample: boolean: Whether to take a sample or not
          :type sampling_technique: str: Which sampling technique to use (top)

      Returns:
          dict -- The row, including the extra output column



.. data:: DATA_SOURCE_MAP
   

   

