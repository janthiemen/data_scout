:mod:`data_scout.transformations.math`
======================================

.. py:module:: data_scout.transformations.math


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   data_scout.transformations.math.Add
   data_scout.transformations.math.Min
   data_scout.transformations.math.Divide
   data_scout.transformations.math.Multiply




.. class:: Add(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Sum {fields}

      

   .. attribute:: key
      :annotation: = Math add

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Min(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Calculate {field_a} - {field_b}

      

   .. attribute:: key
      :annotation: = Math min

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Divide(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Calculate {field_a} / {field_b}

      

   .. attribute:: key
      :annotation: = Math divide

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Multiply(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Multiply {fields}

      

   .. attribute:: key
      :annotation: = Math multiply

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



