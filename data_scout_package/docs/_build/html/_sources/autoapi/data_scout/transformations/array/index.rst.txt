:mod:`data_scout.transformations.array`
=======================================

.. py:module:: data_scout.transformations.array


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   data_scout.transformations.array.Index
   data_scout.transformations.array.AtIndex
   data_scout.transformations.array.Slice
   data_scout.transformations.array.Length
   data_scout.transformations.array.Mean
   data_scout.transformations.array.Sum
   data_scout.transformations.array.Min
   data_scout.transformations.array.Max
   data_scout.transformations.array.Mode
   data_scout.transformations.array.Std
   data_scout.transformations.array.Var
   data_scout.transformations.array.Sort
   data_scout.transformations.array.Concat
   data_scout.transformations.array.Intersect
   data_scout.transformations.array.Unique
   data_scout.transformations.array.Filter
   data_scout.transformations.array.Flatten
   data_scout.transformations.array.ToDict
   data_scout.transformations.array.Merge



Functions
~~~~~~~~~

.. autoapisummary::

   data_scout.transformations.array.convert_value



.. function:: convert_value(search, example)


.. class:: Index(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Get the {side} index of {value} in the list {field} (-1 if not found)

      

   .. attribute:: key
      :annotation: = Array index

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: AtIndex(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Get the element at zero-based index {index} from {field}

      

   .. attribute:: key
      :annotation: = Array at index

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Slice(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Slice the list in {field} from {start} to {end}

      

   .. attribute:: key
      :annotation: = Array slice

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Length(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Get the length of the list in {field}

      

   .. attribute:: key
      :annotation: = Array length

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Mean(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Get the mean of the list in {field}

      

   .. attribute:: key
      :annotation: = Array mean

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Sum(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Get the mean of the list in {field}

      

   .. attribute:: key
      :annotation: = Array sum

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Min(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Get the min of the list in {field}

      

   .. attribute:: key
      :annotation: = Array min

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Max(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Get the max of the list in {field}

      

   .. attribute:: key
      :annotation: = Array max

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Mode(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Get the mode of the list in {field}

      

   .. attribute:: key
      :annotation: = Array mode

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Std(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Get the standard deviation of the list in {field}

      

   .. attribute:: key
      :annotation: = Array standard deviation (std)

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Var(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Get the variance of the list in {field}

      

   .. attribute:: key
      :annotation: = Array variance (var)

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Sort(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Sort the values of the list in {field}

      

   .. attribute:: key
      :annotation: = Array sort

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Concat(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Concat the arrays in {fields}

      

   .. attribute:: key
      :annotation: = Array concat

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Intersect(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Get the intersection of the in {fields}

      

   .. attribute:: key
      :annotation: = Array intersect

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Unique(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Get all unique elements in {fields}

      

   .. attribute:: key
      :annotation: = Array unique

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Filter(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Filter all elements from list where {field}[x] {comparison} {value}

      

   .. attribute:: key
      :annotation: = Array filter

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Flatten(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Flatten {field}

      

   .. attribute:: key
      :annotation: = Array flatten

      

   .. attribute:: is_flatten
      :annotation: = True

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int) -> Tuple[List[dict], int]



.. class:: ToDict(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Combine an array keys ({field_keys}) and values ({field_values}) into a dictionary.

      

   .. attribute:: key
      :annotation: = Array to dictionary

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Merge(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Merge the elements of the list in {field} together, separated by {separator}

      

   .. attribute:: key
      :annotation: = Array merge

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



