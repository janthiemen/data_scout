:mod:`data_scout.transformations.string`
========================================

.. py:module:: data_scout.transformations.string


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   data_scout.transformations.string.Substring
   data_scout.transformations.string.SubstringLeft
   data_scout.transformations.string.SubstringRight
   data_scout.transformations.string.FindLeft
   data_scout.transformations.string.FindRight
   data_scout.transformations.string.Length
   data_scout.transformations.string.Merge
   data_scout.transformations.string.Repeat
   data_scout.transformations.string.TestContains
   data_scout.transformations.string.TestStartsWith
   data_scout.transformations.string.TestEndsWith
   data_scout.transformations.string.TestRegex
   data_scout.transformations.string.TestExact
   data_scout.transformations.string.TestGreater
   data_scout.transformations.string.TestGreaterEqual
   data_scout.transformations.string.TestLess
   data_scout.transformations.string.TestLessEqual
   data_scout.transformations.string.Base64Encode
   data_scout.transformations.string.Base64Decode




.. class:: Substring(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Extract a substring from the left of length {right} from {field} into {output}

      

   .. attribute:: key
      :annotation: = Substring

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: SubstringLeft(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`Substring`

   .. attribute:: title
      :annotation: = Extract a substring from the left of length {right} from {field} into {output}

      

   .. attribute:: key
      :annotation: = Substring left

      

   .. attribute:: fields
      

      


.. class:: SubstringRight(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`Substring`

   .. attribute:: title
      :annotation: = Extract a substring from the right of length {left} from {field} into {output}

      

   .. attribute:: key
      :annotation: = Substring right

      

   .. attribute:: fields
      

      


.. class:: FindLeft(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Find the index of the first occurrence of {lookup} in {field} into {output} (left to right)

      

   .. attribute:: key
      :annotation: = String find left

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: FindRight(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`FindLeft`

   .. attribute:: title
      :annotation: = Find the index of the first occurrence of {lookup} in {field} into {output} (right to left)

      

   .. attribute:: key
      :annotation: = String find right

      

   .. method:: __call__(self, row, index: int)



.. class:: Length(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Calculate the length of {field} into {output}

      

   .. attribute:: key
      :annotation: = String length

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Merge(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Merge string columns together, with the separator {separator}

      

   .. attribute:: key
      :annotation: = String merge

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Repeat(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Repeat the value in {field} {times} times into {output}

      

   .. attribute:: key
      :annotation: = String repeat

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: TestContains(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Test if {field} contains {search} into {output}

      

   .. attribute:: key
      :annotation: = String contains

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: TestStartsWith(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Test if {field} starts with {search} into {output}

      

   .. attribute:: key
      :annotation: = String starts with

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: TestEndsWith(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Test if {field} ends with {search} into {output}

      

   .. attribute:: key
      :annotation: = String ends with

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: TestRegex(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Test if {field} matches {regex} into {output}

      

   .. attribute:: key
      :annotation: = String regex

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: TestExact(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Test if {field} == {search} into {output}

      

   .. attribute:: key
      :annotation: = String equals

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: TestGreater(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Test if {field} > {search} into {output}

      

   .. attribute:: key
      :annotation: = String greater than

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: TestGreaterEqual(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Test if {field} >= {search} into {output}

      

   .. attribute:: key
      :annotation: = String greater or equal

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: TestLess(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Test if {field} < {search} into {output}

      

   .. attribute:: key
      :annotation: = String less than

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: TestLessEqual(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Test if {field} <= {search} into {output}

      

   .. attribute:: key
      :annotation: = String less or equal

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Base64Encode(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Base64 encode {field} into {output}

      

   .. attribute:: key
      :annotation: = Base64 encode

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Base64Decode(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Base64 decode {field} into {output}

      

   .. attribute:: key
      :annotation: = Base64 decode

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



