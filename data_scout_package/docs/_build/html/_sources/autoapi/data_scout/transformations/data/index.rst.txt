:mod:`data_scout.transformations.data`
======================================

.. py:module:: data_scout.transformations.data


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   data_scout.transformations.data.Convert
   data_scout.transformations.data.ConvertDatetime
   data_scout.transformations.data.FieldToColumn
   data_scout.transformations.data.DuplicateColumn
   data_scout.transformations.data.DropColumn
   data_scout.transformations.data.RenameColumn
   data_scout.transformations.data.Transpose
   data_scout.transformations.data.Shift
   data_scout.transformations.data.Diff
   data_scout.transformations.data.PctChange
   data_scout.transformations.data.CleanJSON
   data_scout.transformations.data.GetFields
   data_scout.transformations.data.MissingColumns




.. class:: Convert(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Convert {field} to {to}

      

   .. attribute:: key
      :annotation: = Convert

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)

      This class is called on each row.

      Arguments:
          row {dict} -- The complete row

      Returns:
          dict -- The row, including the extra output column



.. class:: ConvertDatetime(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Convert {field} to datetime

      

   .. attribute:: key
      :annotation: = Convert to datetime

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)

      This class is called on each row.

      Arguments:
          row {dict} -- The complete row

      Returns:
          dict -- The row, including the extra output column



.. class:: FieldToColumn(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Convert {field} to columns

      

   .. attribute:: key
      :annotation: = List/dict to columns

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: DuplicateColumn(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Duplicate {field} as {output}

      

   .. attribute:: key
      :annotation: = Duplicate column

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: DropColumn(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Drop {field}

      

   .. attribute:: key
      :annotation: = Drop column

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: RenameColumn(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Rename {field} to {new}

      

   .. attribute:: key
      :annotation: = Rename column

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Transpose(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: is_global
      :annotation: = True

      

   .. attribute:: title
      :annotation: = Transpose index and columns

      

   .. attribute:: key
      :annotation: = Transpose

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



.. class:: Shift(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: is_global
      :annotation: = True

      

   .. attribute:: title
      :annotation: = Shift the values in {fields} by {periods}

      

   .. attribute:: key
      :annotation: = Shift column

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



.. class:: Diff(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: is_global
      :annotation: = True

      

   .. attribute:: title
      :annotation: = Calculate the difference between values in {fields} (vertically)

      

   .. attribute:: key
      :annotation: = Differences in column (diff)

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



.. class:: PctChange(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: is_global
      :annotation: = True

      

   .. attribute:: title
      :annotation: = Calculate the percentual difference between values in {fields} (vertically)

      

   .. attribute:: key
      :annotation: = Percentual change in column (pctchange)

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



.. class:: CleanJSON

   This transformation cleans to object to present valid JSON. It's NOT meant to be used by the user. This is only for
   internal usage.

   .. method:: __call__(self, row, index: int)



.. class:: GetFields


   .. method:: spark(self, records)


   .. method:: __call__(self, records, index: int)



.. class:: MissingColumns(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   Add missing columns to the rows. Only for internal use.

   .. method:: __call__(self, row, index: int)



