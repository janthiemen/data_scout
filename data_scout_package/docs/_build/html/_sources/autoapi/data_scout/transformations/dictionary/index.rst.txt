:mod:`data_scout.transformations.dictionary`
============================================

.. py:module:: data_scout.transformations.dictionary


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   data_scout.transformations.dictionary.Keys
   data_scout.transformations.dictionary.Values
   data_scout.transformations.dictionary.Get
   data_scout.transformations.dictionary.Create




.. class:: Keys(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Get the keys of the dictionary in {field}

      

   .. attribute:: key
      :annotation: = Dictionary get keys

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Values(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Get the values of the dictionary in {field}

      

   .. attribute:: key
      :annotation: = Dictionary get value

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Get(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Get the value of the dictionary in {field} for key {key}

      

   .. attribute:: key
      :annotation: = Dictionary get

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: Create(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Create a dictionary field

      

   .. attribute:: key
      :annotation: = Dictionary creat

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



