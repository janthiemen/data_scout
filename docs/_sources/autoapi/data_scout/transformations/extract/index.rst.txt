:mod:`data_scout.transformations.extract`
=========================================

.. py:module:: data_scout.transformations.extract


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   data_scout.transformations.extract.ExtractNumbers
   data_scout.transformations.extract.ExtractHttpQueryString
   data_scout.transformations.extract.ExtractRegex
   data_scout.transformations.extract.ExtractDelimiters
   data_scout.transformations.extract.ExtractPositions




.. class:: ExtractNumbers(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Extract numbers from {field} into {output}

      

   .. attribute:: key
      :annotation: = Extract numbers

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: ExtractHttpQueryString(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Extract HTTP query string from {field} into {output}

      

   .. attribute:: key
      :annotation: = Extract HTTP query

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: ExtractRegex(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Extract regex from {field} into {output}

      

   .. attribute:: key
      :annotation: = Extract regex

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



.. class:: ExtractDelimiters(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`ExtractRegex`

   .. attribute:: title
      :annotation: = Extract the text between the delimiter: {delimiter} in {field} as {output}

      

   .. attribute:: key
      :annotation: = Extract between delimiters

      

   .. attribute:: fields
      

      


.. class:: ExtractPositions(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Extract the characters between pos. {start} - {end} into {output}

      

   .. attribute:: key
      :annotation: = Extract between positions

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, row, index: int)



