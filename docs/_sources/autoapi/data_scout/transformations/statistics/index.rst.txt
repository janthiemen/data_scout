:mod:`data_scout.transformations.statistics`
============================================

.. py:module:: data_scout.transformations.statistics


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   data_scout.transformations.statistics.StatsBase
   data_scout.transformations.statistics.Correlation
   data_scout.transformations.statistics.Covariance
   data_scout.transformations.statistics.CumSum
   data_scout.transformations.statistics.CumMax
   data_scout.transformations.statistics.CumMin
   data_scout.transformations.statistics.CumProd
   data_scout.transformations.statistics.Mad
   data_scout.transformations.statistics.Skew
   data_scout.transformations.statistics.Kurtosis
   data_scout.transformations.statistics.Median
   data_scout.transformations.statistics.Mode
   data_scout.transformations.statistics.Max
   data_scout.transformations.statistics.Min
   data_scout.transformations.statistics.Sum
   data_scout.transformations.statistics.Std
   data_scout.transformations.statistics.Var
   data_scout.transformations.statistics.Sem
   data_scout.transformations.statistics.NUnique
   data_scout.transformations.statistics.ValueCounts




.. class:: StatsBase(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: is_global
      :annotation: = True

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



.. class:: Correlation(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: is_global
      :annotation: = True

      

   .. attribute:: title
      :annotation: = Compute pairwise correlation of {fields}

      

   .. attribute:: key
      :annotation: = Correlation

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



.. class:: Covariance(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: is_global
      :annotation: = True

      

   .. attribute:: title
      :annotation: = Compute pairwise covariance of {fields}

      

   .. attribute:: key
      :annotation: = Covariance

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



.. class:: CumSum(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`StatsBase`

   .. attribute:: title
      :annotation: = Calculate the cumulative sum of {fields}

      

   .. attribute:: key
      :annotation: = Cumulative sum

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



.. class:: CumMax(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`StatsBase`

   .. attribute:: title
      :annotation: = Calculate the cumulative maximum of {fields}

      

   .. attribute:: key
      :annotation: = Cumulative max

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



.. class:: CumMin(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`StatsBase`

   .. attribute:: title
      :annotation: = Calculate the cumulative minimum of {fields}

      

   .. attribute:: key
      :annotation: = Cumulative min

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



.. class:: CumProd(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`StatsBase`

   .. attribute:: title
      :annotation: = Calculate the cumulative product of {fields}

      

   .. attribute:: key
      :annotation: = Cumulative product

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



.. class:: Mad(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`StatsBase`

   .. attribute:: title
      :annotation: = Calculate the mean absolute deviation of {fields}

      

   .. attribute:: key
      :annotation: = Mean absolute deviation (mad)

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



.. class:: Skew(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: is_global
      :annotation: = True

      

   .. attribute:: title
      :annotation: = Calculate the unbiased skew of {fields}

      

   .. attribute:: key
      :annotation: = Skew

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



.. class:: Kurtosis(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`Skew`

   .. attribute:: title
      :annotation: = Calculate the unbiased kurtosis of {fields}

      

   .. attribute:: key
      :annotation: = Kurtosis

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



.. class:: Median(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`Skew`

   .. attribute:: title
      :annotation: = Calculate the median of {fields}

      

   .. attribute:: key
      :annotation: = Median

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



.. class:: Mode(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`Skew`

   .. attribute:: title
      :annotation: = Calculate the mode of {fields}

      

   .. attribute:: key
      :annotation: = Mode

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



.. class:: Max(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`Skew`

   .. attribute:: title
      :annotation: = Calculate the max of {fields}

      

   .. attribute:: key
      :annotation: = Max

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



.. class:: Min(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`Skew`

   .. attribute:: title
      :annotation: = Calculate the min of {fields}

      

   .. attribute:: key
      :annotation: = Min

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



.. class:: Sum(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Calculate the sum

      

   .. attribute:: key
      :annotation: = Sum

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



.. class:: Std(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Calculate the standard deviation of {fields}

      

   .. attribute:: key
      :annotation: = Standard Deviation (std)

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



.. class:: Var(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`Std`

   .. attribute:: title
      :annotation: = Calculate the variance of {fields}

      

   .. attribute:: key
      :annotation: = Variance (var)

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



.. class:: Sem(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`Std`

   .. attribute:: title
      :annotation: = Calculate the unbiased standard error of the mean in {fields}

      

   .. attribute:: key
      :annotation: = Standard error of mean (sem)

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



.. class:: NUnique(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`StatsBase`

   .. attribute:: title
      :annotation: = Get the number of unique values in {fields}

      

   .. attribute:: key
      :annotation: = Number of unique values (nunique)

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



.. class:: ValueCounts(arguments: dict, sample_size: int, example: dict = None)


   Bases: :py:obj:`data_scout.transformations.transformation.Transformation`

   .. attribute:: title
      :annotation: = Get the number of values in {fields}

      

   .. attribute:: key
      :annotation: = Value counts

      

   .. attribute:: fields
      

      

   .. method:: __call__(self, rows: pandas.DataFrame, index: int)



